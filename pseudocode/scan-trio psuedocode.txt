scan_trio<-function(plink.ped, window.size=25, window.type = "M", param= NULL){

#Extract user-specified parameters
if (is.null(param){
n.perm<-1000
n.core<-25
} else {
n.perm<-param[1]
}

#Create permuted data to obtain p-values for Scan-Trio statistic if needed
if !(permuted-data-file exists){
  .permuteData(plink.ped, n.perm)
}

#Make GRanges windows based on user-specified parameters

windows<-.getWindows(plink.ped, window.size, window.type, param)
test.stat.for.data<-.getTestStatForData(windows)
test.stat.for.permuted.data<-.getTestStatForPermutedData(window.size,window.type)
pval.for.data<-calculateSignificance(testStatForData, testStatForPermutedData)
results<-c(pValForData,mafs,window)

}

########################################################

# Helper Functions - RV_TDT

########################################################

.permuteData<-function(plink.ped, n.perm){

#Permute haplotypes transmitted from the parents to child
(i.e., get new child haplotypes)
#You can probably do this using tped? Maybe it would be better to use GRanges, though

#Initialize new data frame for results

#Make sure you use apply for thisâ€¦

#for i in 1:n.perm
#for j in 1:n.trios:
	#Get parents of current trio
	#Select 1 haplotype from each parent
	#Put the 2 haplotypes together to get the child genotype
	#Insert child haplotype into df
}

#Save the df.

.getWindows<-function(plink.ped, window.size, window.type, param){

#

}

.getTestStatForData<-function(windows){
#Create windows from data

}

.getTestStatForPermutedData<-function(windows){



}

.calculateSignificance<-function(testStatForData, testStatForPermutedData){



}


########################################################

# Helper Functions - .permute.data

########################################################

.getTransmittedRareVarCount<-function(){



}

########################################################

# Helper Functions - .getTestStatForData,.getTestStatForPermutedData

########################################################

.calculateTestStatForWindow<-function(){

  n <- (minor.in + minor.out + 1)/(minor.in + minor.out + 
                                     major.in + major.out + 2)
  y.in <- minor.in
  y.out <- minor.out
  n.in <- minor.in + major.in
  n.out <- minor.out + major.out
  p.in <- (minor.in + 1)/(n.in + 2)
  p.out <- (minor.out + 1)/(n.out + 2)
  loglr <- y.in * log(p.in/n) + y.out * 
    log(p.out/n) + (n.in - y.in) * log((1 - p.in)/(1 - 
                                                     n)) + (n.out - y.out) * log((1 - p.out)/(1 - n))
  lr <- exp(loglr)
  return(t(lr))

  #TODO: why is there a t() here?

}